
#include <iostream>

using namespace std;

int n, m, k;
long long* tree, *treeSum;

long long sum(int i) {
	long long result = 0;
	while (i > 0) {
		result += treeSum[i];
		i -= (i & -i);
	}
	return result;
}

void update(int i, long long diff) { // i번째 수를 diff로 더하는 업데이트
	while (i <= n) {
		treeSum[i] += diff;
		i += (i & -i);
	}
}

long long result(int start, int end) {
	return sum(end) - sum(start - 1);
}


void init() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
}

int main()
{
	init();

	cin >> n >> m >> k;
	tree = new long long[n + 1]{};
	treeSum = new long long[n + 1]{};

	for (int i = 1; i <= n; i++) {
		cin >> tree[i];
		update(i, tree[i]);
	}
	int count = 0;
	for (int i = 1; i <= m+k; i++) {
		long long a, b, c;
		cin >> a >> b >> c;
		
		if (a == 1) {
			update(b, -tree[b]);
			tree[b] = c;
			update(b, c);
		}
		else {
			cout << result(b, c) << endl;
		}
	}

	delete[] tree, treeSum;


	return 0;
}
